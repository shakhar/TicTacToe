// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.TicTacToe.module("GameApp", function(GameApp, App, Backbone, Marionette, $, _) {
    return GameApp.GameController = (function(_super) {
      __extends(GameController, _super);

      function GameController() {
        return GameController.__super__.constructor.apply(this, arguments);
      }

      GameController.prototype.initialize = function() {
        this.player = 1;
        this.validLocation = true;
        this.gameover = false;
        this.gameModel = this.getGameModel();
        this.setEvents();
        this.region = this.options.region;
        this.layout = this.getLayoutView();
        this.listenTo(this.layout, "show", (function(_this) {
          return function() {
            _this.leftPageRegion();
            _this.rightPageRegion();
            return _this.boardRegion();
          };
        })(this));
        return this.region.show(this.layout);
      };

      GameController.prototype.leftPageRegion = function() {
        this.leftPageView = this.getLeftPageView();
        return this.layout.leftPageRegion.show(this.leftPageView);
      };

      GameController.prototype.rightPageRegion = function() {
        this.rightPageView = this.getRightPageView();
        return this.layout.rightPageRegion.show(this.rightPageView);
      };

      GameController.prototype.boardRegion = function() {
        this.boardView = this.getBoardView();
        return this.layout.boardRegion.show(this.boardView);
      };

      GameController.prototype.getLeftPageView = function() {
        return new GameApp.LeftPageView({
          template: HAML["app/assets/scripts/game/templates/" + this.mode + "/left_page"]
        });
      };

      GameController.prototype.getRightPageView = function() {
        return new GameApp.RightPageView({
          template: HAML["app/assets/scripts/game/templates/" + this.mode + "/right_page"]
        });
      };

      GameController.prototype.getBoardView = function() {
        return new GameApp.BoardView;
      };

      GameController.prototype.getGameModel = function() {
        return new GameApp.GameModel;
      };

      GameController.prototype.getLayoutView = function() {
        return new GameApp.Layout;
      };

      GameController.prototype.move = function(parentLocation, location) {
        this.boardView.changeBoard(location, this.player, false);
        if (this.gameModel.changeBoard(parentLocation, location, this.player)) {
          this.boardView.changeBoard(parentLocation, this.player, true);
        }
        return setTimeout((function(_this) {
          return function() {
            var hideImage, image, isTie, isWin, lines;
            isWin = _this.gameModel.checkBoard(_this.player);
            isTie = _this.gameModel.isFull();
            if (isWin || isTie) {
              lines = _this.gameModel.getWinningLines();
              _this.boardView.drawWinningLines(lines);
              return _this.gameOverMessage(isWin);
            } else {
              _this.player = _this.player === 1 ? -1 : 1;
              image = _this.player === 1 ? "smallX" : "smallO";
              hideImage = _this.player === 1 ? "smallO" : "smallX";
              $('#log #' + hideImage).css('display', 'none');
              return $('#log #' + image).css('display', 'visible');
            }
          };
        })(this), 500);
      };

      GameController.prototype.reset = function() {
        this.gameModel.reset();
        this.boardView.reset();
        this.player = 1;
        this.gameover = false;
        this.validLocation = true;
        $("td.in").removeClass("active");
        $("td.in").removeClass("full");
        $("#log #smallO").css("display", "none");
        $("#log #smallX").css("display", "visible");
        return $("#log span").text("Turn");
      };

      GameController.prototype.gameOverMessage = function(isWin) {
        var hideImage, image;
        image = this.player === 1 ? "smallX" : "smallO";
        hideImage = this.player === 1 ? "smallO" : "smallX";
        this.gameover = true;
        $("td.in").removeClass("active");
        if (isWin) {
          $("#log #" + hideImage).css("display", "none");
          $("#log #" + image).css("display", "visible");
          return $("#log span").text("Wins");
        } else {
          $("#log #" + hideImage).css("display", "none");
          $("#log #" + image).css("display", "none");
          $("#log #x-tie").css("display", "visible");
          $("#log #o-tie").css("display", "visible");
          return $("#log span").text("Tie");
        }
      };

      GameController.prototype.setEvents = function() {
        return $((function(_this) {
          return function() {
            $("td.in").click(function(event) {
              return _this.handleCellClick(event.target);
            });
            $(".disable-invalid").click(function() {
              return localStorage.setItem("disableInvalidModal", true);
            });
            $(".disable-full").click(function() {
              return localStorage.setItem("disableFullModal", true);
            });
            return $("#new-game-btn").click(function() {
              return _this.reset();
            });
          };
        })(this));
      };

      GameController.prototype.handleCellClick = function(location) {
        var parentLocation;
        if (!this.gameover) {
          parentLocation = location.parentNode.parentNode.parentNode.parentNode;
          if ((this.validLocation === true || this.sameClasses(this.validLocation, parentLocation.className)) && this.gameModel.checkLocation(parentLocation, location)) {
            $("td.in").removeClass("active");
            if (this.validLocation !== true && this.gameModel.isFull(this.validLocation)) {
              $("." + this.validLocation.split(" ").join(".") + " td").addClass("full");
            }
            this.validLocation = this.nextLocation(location);
            if (this.gameModel.isFull(this.validLocation) && !this.gameModel.isFull()) {
              $("td.in").addClass("active");
              $("." + this.validLocation.split(" ").join(".") + " td").addClass("full");
              $("td.full").removeClass("active");
              this.validLocation = true;
              if (localStorage["disableFullModal"] === "false") {
                $("#Full-Modal").modal("show");
              }
            } else {
              $("." + this.validLocation.split(" ").join(".") + " td").addClass("active");
            }
            this.boardView.stopAnimationTrigger = true;
            this.move(parentLocation, location);
            return true;
          } else {
            this.boardView.invalidAnimation(this.validLocation);
            if (this.gameModel.checkLocation(parentLocation, location) && localStorage["disableInvalidModal"] === "false") {
              $("#Invalid-Modal").modal("show");
            }
          }
        }
        return false;
      };

      GameController.prototype.nextLocation = function(location) {
        var loc, locations, parsedLocation, _i, _len;
        locations = location.className.split(" ");
        parsedLocation = Array();
        for (_i = 0, _len = locations.length; _i < _len; _i++) {
          loc = locations[_i];
          switch (loc) {
            case "up":
            case "left":
            case "down":
            case "right":
            case "center":
            case "centers":
              parsedLocation.push(loc);
          }
        }
        parsedLocation.push("out");
        return parsedLocation.join(" ");
      };

      GameController.prototype.sameClasses = function(str1, str2) {
        var array1, array2, x, _i, _j, _len, _len1;
        array1 = str1.split(" ");
        array2 = str2.split(" ");
        for (_i = 0, _len = array1.length; _i < _len; _i++) {
          x = array1[_i];
          if (__indexOf.call(array2, x) < 0) {
            return false;
          }
        }
        for (_j = 0, _len1 = array2.length; _j < _len1; _j++) {
          x = array2[_j];
          if (__indexOf.call(array1, x) < 0) {
            return false;
          }
        }
        return true;
      };

      return GameController;

    })(Marionette.Controller);
  });

}).call(this);
