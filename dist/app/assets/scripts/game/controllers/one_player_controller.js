// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.TicTacToe.module("GameApp", function(GameApp, App, Backbone, Marionette, $, _) {
    return GameApp.OnePlayerController = (function(_super) {
      __extends(OnePlayerController, _super);

      function OnePlayerController() {
        return OnePlayerController.__super__.constructor.apply(this, arguments);
      }

      OnePlayerController.prototype.initialize = function() {
        this.mode = "one_player";
        return OnePlayerController.__super__.initialize.apply(this, arguments);
      };

      OnePlayerController.prototype.move = function(parentLocation, location, status) {
        this.makeMove(parentLocation, location);
        this.printBoard(this.gameModel.board);
        this.changeValidLocation(location);
        return setTimeout((function(_this) {
          return function() {
            var isTie, isWin, lines;
            isWin = _this.gameModel.checkBoard(_this.player);
            isTie = _this.gameModel.isFull();
            if (isWin || isTie) {
              lines = _this.gameModel.getWinningLines();
              _this.boardView.drawWinningLines(lines);
              _this.gameOverMessage(isWin);
            } else {
              _this.changePlayer();
            }
            return setTimeout(function() {
              if (!((status != null) || _this.gameover)) {
                startLoading();
                return _this.makeComputerMove(parentLocation, location);
              } else {
                return stopLoading();
              }
            }, 100);
          };
        })(this), 500);
      };

      OnePlayerController.prototype.makeMove = function(parentLocation, location) {
        this.boardView.changeBoard(location, this.player, false);
        if (this.gameModel.changeBoard(parentLocation, location, this.player)) {
          return this.boardView.changeBoard(parentLocation, this.player, true);
        }
      };

      OnePlayerController.prototype.changeValidLocation = function(location) {
        $("td.in").removeClass("active");
        if (this.validLocation !== true && this.gameModel.isFull(this.validLocation)) {
          $("." + this.validLocation.split(" ").join(".") + " td").addClass("full");
        }
        this.validLocation = this.nextLocation(location);
        if (this.gameModel.isFull(this.validLocation) && !this.gameModel.isFull()) {
          return this.showValidationError();
        } else {
          return $("." + this.validLocation.split(" ").join(".") + " td").addClass("active");
        }
      };

      OnePlayerController.prototype.showValidationError = function() {
        $("td.in").addClass("active");
        $("." + this.validLocation.split(" ").join(".") + " td").addClass("full");
        $("td.full").removeClass("active");
        this.validLocation = true;
        if (!localStorage["disableFullModal"]) {
          return $("#Full-Modal").modal("show");
        }
      };

      OnePlayerController.prototype.changePlayer = function() {
        var hideImage, image;
        this.player = this.player === 1 ? -1 : 1;
        image = this.player === 1 ? "smallX" : "smallO";
        hideImage = this.player === 1 ? "smallO" : "smallX";
        $('#log #' + hideImage).css('display', 'none');
        return $('#log #' + image).css('display', 'visible');
      };

      OnePlayerController.prototype.makeComputerMove = function(parentLocation, location) {
        var bestMove;
        bestMove = this.gameModel.alphaBeta(this.validLocation);
        parentLocation = this.gameModel.parseBackLocation(bestMove[0], bestMove[1]);
        location = this.gameModel.parseBackLocation(bestMove[2], bestMove[3], parentLocation);
        return this.move(parentLocation, location, true);
      };

      OnePlayerController.prototype.printBoard = function(board) {
        var i, j, k, l, str, val, _i, _j, _k, _l;
        str = "";
        for (i = _i = 0; _i <= 2; i = ++_i) {
          for (j = _j = 0; _j <= 2; j = ++_j) {
            str += "\n";
            for (k = _k = 0; _k <= 2; k = ++_k) {
              str += " ";
              for (l = _l = 0; _l <= 2; l = ++_l) {
                val = board.table[i][k].table[j][l].val;
                if (val === 1) {
                  str += "X";
                }
                if (val === -1) {
                  str += "Y";
                }
                if (val === 0) {
                  str += "-";
                }
              }
            }
          }
        }
        return console.log(str);
      };

      OnePlayerController.prototype.setEvents = function() {
        OnePlayerController.__super__.setEvents.apply(this, arguments);
        return $((function(_this) {
          return function() {
            $("td.in").off("click");
            $("td.in").click(function(event) {
              var parentLocation;
              if (_this.player === 1) {
                parentLocation = event.target.parentNode.parentNode.parentNode.parentNode;
                if ((_this.validLocation === true || _this.sameClasses(_this.validLocation, parentLocation.className)) && _this.gameModel.checkLocation(parentLocation, event.target)) {
                  _this.boardView.stopAnimationTrigger = true;
                  return _this.move(parentLocation, event.target);
                } else {
                  _this.boardView.invalidAnimation(_this.validLocation);
                  if (_this.gameModel.checkLocation(parentLocation, location) && !localStorage["disableInvalidModal"]) {
                    return $("#Invalid-Modal").modal("show");
                  }
                }
              }
            });
            $("#level-btn-group").click(function() {
              _this.gameModel.difficulty = $("#level-btn-group .active input").attr("id");
              return _this.reset();
            });
            return $("#level-select").click(function() {
              if (_this.gameModel.level !== $("#level-select").val()) {
                _this.gameModel.level = $("#level-select").val();
                return _this.reset();
              }
            });
          };
        })(this));
      };

      return OnePlayerController;

    })(GameApp.GameController);
  });

}).call(this);
