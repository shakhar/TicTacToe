// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.TicTacToe.module("GameApp", function(GameApp, App, Backbone, Marionette, $, _) {
    GameApp.Layout = (function(_super) {
      __extends(Layout, _super);

      function Layout() {
        return Layout.__super__.constructor.apply(this, arguments);
      }

      Layout.prototype.template = HAML["app/assets/scripts/game/templates/game_layout"];

      Layout.prototype.regions = {
        leftPageRegion: "#left-page-region",
        rightPageRegion: "#right-page-region",
        boardRegion: "#board-region"
      };

      Layout.prototype.onShow = function() {
        $(".navbar-left").hide();
        return $(".navbar-right").show();
      };

      return Layout;

    })(Marionette.Layout);
    GameApp.LeftPageView = (function(_super) {
      __extends(LeftPageView, _super);

      function LeftPageView() {
        return LeftPageView.__super__.constructor.apply(this, arguments);
      }

      return LeftPageView;

    })(Marionette.ItemView);
    GameApp.RightPageView = (function(_super) {
      __extends(RightPageView, _super);

      function RightPageView() {
        return RightPageView.__super__.constructor.apply(this, arguments);
      }

      return RightPageView;

    })(Marionette.ItemView);
    return GameApp.BoardView = (function(_super) {
      __extends(BoardView, _super);

      function BoardView() {
        return BoardView.__super__.constructor.apply(this, arguments);
      }

      BoardView.prototype.template = HAML["app/assets/scripts/game/templates/board"];

      BoardView.prototype.initalize = function() {
        return this.stopAnimationTrigger = false;
      };

      BoardView.prototype.onShow = function() {
        var minSize, width;
        width = $(window).width() - $("table#main").width();
        minSize = Math.min($(window).height(), $(window).width());
        $("#chat").css("width", width / 5);
        $("#log").css("width", width / 5);
        $("td.out").width(minSize / 4);
        $("td.out").height(minSize / 4);
        $("td.in").width(minSize / 15);
        $("td.in").height(minSize / 15);
        return $("table.main").css("margin-top", "" + (($(window).height() - $("table.main").height()) / 2 - $("nav").height()) + "px");
      };

      BoardView.prototype.reset = function() {
        $("td").css("background", "none");
        $(".in img").remove();
        $("table div").remove();
        $("canvas").css("z-index", -1);
        if (this.context != null) {
          return this.context.clearRect(0, 0, 590, 590);
        }
      };

      BoardView.prototype.changeBoard = function(location, player, isBigBoard) {
        var image;
        if (isBigBoard) {
          image = player === 1 ? "assets/images/bigX.png" : "assets/images/bigO.png";
          return $(location).css("background", "url(" + image + ") round");
        } else {
          image = player === 1 ? "assets/images/smallX.png" : "assets/images/smallO.png";
          return $(location).html("<img class='small-img' src='" + image + "'>");
        }
      };

      BoardView.prototype.invalidAnimation = function(location) {
        var animation, that, timeout;
        this.stopAnimationTrigger = false;
        that = this;
        animation = function(num) {
          var timeout;
          $("." + location.split(" ").join(".") + " td").removeClass("active");
          clearTimeout(timeout);
          return timeout = setTimeout(function() {
            if (that.stopAnimationTrigger) {
              $("." + location.split(" ").join(".") + " td").removeClass("active");
              return;
            }
            $("." + location.split(" ").join(".") + " td").addClass("active");
            num--;
            if (num > 0) {
              clearTimeout(timeout);
              return timeout = setTimeout(function() {
                return animation(num);
              }, 300);
            }
          }, 300);
        };
        return timeout = setTimeout(function() {
          return animation(3);
        }, 300);
      };

      BoardView.prototype.drawWinningLines = function(lines) {
        var end, line, start, _i, _len, _results;
        this.setCanvas();
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          start = line.start;
          end = line.end;
          _results.push(this.drawLine(start, end));
        }
        return _results;
      };

      BoardView.prototype.setCanvas = function() {
        var offset;
        offset = $("table.main").offset();
        $("canvas").offset({
          top: offset.top - 10,
          left: offset.left - 10
        });
        return $("canvas").css("z-index", 1);
      };

      BoardView.prototype.drawLine = function(start, end) {
        start.x -= $("canvas").position().left;
        start.y -= $("canvas").position().top;
        end.x -= $("canvas").position().left;
        end.y -= $("canvas").position().top;
        this.context = $("canvas")[0].getContext("2d");
        this.context.beginPath();
        this.context.moveTo(start.x, start.y);
        this.context.lineTo(end.x, end.y);
        this.context.lineWidth = 15;
        this.context.lineCap = "round";
        this.context.strokeStyle = "rgba(0, 255, 140, 0.5)";
        return this.context.stroke();
      };

      return BoardView;

    })(Marionette.ItemView);
  });

}).call(this);
