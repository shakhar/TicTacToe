// Generated by CoffeeScript 1.7.1
(function() {
  var connections, counter, findConnectedSocket, io, removeConnectionSocket, server, tempSocket;

  server = require("./server").server;

  io = require("socket.io").listen(server);

  counter = 1;

  connections = [];

  tempSocket = null;

  io.set("transports", ["xhr-polling", "jsonp-polling"]);

  io.sockets.on("connection", function(socket) {
    if (tempSocket) {
      connections.push([tempSocket, socket]);
      tempSocket.emit("setPlayer", 1);
      socket.emit("setPlayer", -1);
      tempSocket = null;
    } else {
      tempSocket = socket;
    }
    socket.on("addUser", function(username) {
      var connectedSocket;
      if (username) {
        socket.username = username;
        socket.emit("updateChat", null, "You have connected as " + socket.username, "green");
        connectedSocket = findConnectedSocket(socket);
        if (connectedSocket) {
          socket.emit("updateChat", null, "" + connectedSocket.username + " has connected", "green", true, true);
          return connectedSocket.emit("updateChat", null, "" + socket.username + " has connected", "green", true);
        } else {
          return socket.emit("updateChat", null, "Waiting for opponent's connection...", "blue");
        }
      } else {
        socket.username = "Guest" + counter;
        socket.emit("updateChat", null, "You have connected as Guest" + counter, "green");
        counter++;
        connectedSocket = findConnectedSocket(socket);
        if (connectedSocket) {
          socket.emit("updateChat", null, "" + connectedSocket.username + " has connected", "green", true, true);
          return connectedSocket.emit("updateChat", null, "" + socket.username + " has connected", "green", true);
        } else {
          return socket.emit("updateChat", null, "Waiting for opponent's connection...", "blue");
        }
      }
    });
    socket.on("sendChat", function(message) {
      var connectedSocket;
      connectedSocket = findConnectedSocket(socket);
      if (connectedSocket) {
        connectedSocket.emit("updateChat", socket.username, message, "yellow");
        return socket.emit("updateChat", "Me", message, "orange");
      }
    });
    socket.on("updateOpponent", function(parentLocation, location) {
      var connectedSocket;
      connectedSocket = findConnectedSocket(socket);
      if (connectedSocket) {
        return connectedSocket.emit("updateGame", parentLocation, location);
      }
    });
    return socket.on("disconnect", function() {
      var connectedSocket;
      if (tempSocket === socket) {
        tempSocket = null;
      }
      connectedSocket = removeConnectionSocket(socket);
      if (connectedSocket) {
        connectedSocket.emit("updateChat", null, "" + socket.username + " has disconnected", "red", false);
      }
      if (tempSocket) {
        connections.push([tempSocket, connectedSocket]);
        tempSocket.emit("setPlayer", 1);
        connectedSocket.emit("setPlayer", -1);
        tempSocket.emit("updateChat", null, "" + connectedSocket.username + " has connected", "green", true, true);
        connectedSocket.emit("updateChat", null, "" + tempSocket.username + " has connected", "green", true);
        return tempSocket = null;
      } else {
        tempSocket = connectedSocket;
        if (connectedSocket) {
          return connectedSocket.emit("updateChat", null, "Waiting for opponent's connection...", "blue");
        }
      }
    });
  });

  findConnectedSocket = function(socket) {
    var connection, _i, _len;
    for (_i = 0, _len = connections.length; _i < _len; _i++) {
      connection = connections[_i];
      if (connection) {
        if (connection[0] === socket) {
          return connection[1];
        }
        if (connection[1] === socket) {
          return connection[0];
        }
      }
    }
    return null;
  };

  removeConnectionSocket = function(socket) {
    var connectedSocket, i, _i, _ref;
    connectedSocket = null;
    for (i = _i = 0, _ref = connections.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (connections[i]) {
        if (connections[i][0] === socket) {
          connectedSocket = connections[i][1];
          delete connections[i];
          break;
        }
        if (connections[i][1] === socket) {
          connectedSocket = connections[i][0];
          delete connections[i];
          break;
        }
      }
    }
    return connectedSocket;
  };

}).call(this);
